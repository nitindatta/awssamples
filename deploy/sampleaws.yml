AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template ElasticBeanstalk_in_VPC: Sample template
  showing how to create an Elastic Beanstalk dot net hello world environment in a VPC. The stack
  contains 2 subnets: the first subnet is public and contains the load balancer,
  a NAT device for internet access from the private subnet and a bastion host to
  allow SSH access to the Elastic Beanstalk hosts. The second subnet is private
  and contains the Elastic Beanstalk instances. You will be billed for the AWS
  resources used if you create a stack from this template.
Parameters:
  # BastionKeyName:
  #   Description: Name of an existing EC2 KeyPair to enable SSH access to the bastion host
  #   Type: 'AWS::EC2::KeyPair::KeyName'
  #   ConstraintDescription: must be the name of an existing EC2 KeyPair.
  KeyName:
    Description: >-
      Name of an existing EC2 KeyPair to enable RDP access to the Elastic
      Beanstalk windows hosts
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  RDPLocation:
    Description: >-
      Lockdown RDP access to the bastion host (default can be accessed from
      anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  EC2InstanceType:
    Description: Beanstalk Host EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  # DBUser:
  #   NoEcho: 'true'
  #   Type: String
  #   Description: Test database admin account name
    MinLength: '1'
  #   MaxLength: '16'
  #   AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  #   ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  # DBPassword:
  #   NoEcho: 'true'
  #   Type: String
  #   Description: Test database admin account password
  #   MinLength: '8'
  #   MaxLength: '41'
  #   AllowedPattern: '[a-zA-Z0-9]*'
  #   ConstraintDescription: must contain only alphanumeric characters.

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
    Private:
      CIDR: 10.0.1.0/24
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64

  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6

  AWSNATRegionArch2AMI:
    us-east-1:
      NATHVM64: ami-00a9d4a05375b2763

  Region2Principal:
    us-east-1:
      EC2Principal: ec2.amazonaws.com
      OpsWorksPrincipal: opsworks.amazonaws.com
 
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Public
        - CIDR
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundRDPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '102'
      Protocol: '27'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref RDPLocation
      PortRange:
        From: '3089'
        To: '3089'

  # InboundEphemeralPublicNetworkAclEntry:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: '103'
  #     Protocol: '6'
  #     RuleAction: allow
  #     Egress: 'false'
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: '1024'
  #       To: '65535'
  # OutboundPublicNetworkAclEntry:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: '100'
  #     Protocol: '6'
  #     RuleAction: allow
  #     Egress: 'true'
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: '0'
  #       To: '65535'
  # PublicSubnetNetworkAclAssociation:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnet
  #     NetworkAclId: !Ref PublicNetworkAcl
  # PrivateSubnet:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: !FindInMap 
  #       - SubnetConfig
  #       - Private
  #       - CIDR
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Private
  # PrivateRouteTable:
  #   Type: 'AWS::EC2::RouteTable'
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Private
  # PrivateSubnetRouteTableAssociation:
  #   Type: 'AWS::EC2::SubnetRouteTableAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet
  #     RouteTableId: !Ref PrivateRouteTable
  # PrivateRoute:
  #   Type: 'AWS::EC2::Route'
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     InstanceId: !Ref NATDevice
  # PrivateNetworkAcl:
  #   Type: 'AWS::EC2::NetworkAcl'
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Private
  # InboundPrivateNetworkAclEntry:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PrivateNetworkAcl
  #     RuleNumber: '100'
  #     Protocol: '6'
  #     RuleAction: allow
  #     Egress: 'false'
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: '0'
  #       To: '65535'
  # OutBoundPrivateNetworkAclEntry:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PrivateNetworkAcl
  #     RuleNumber: '100'
  #     Protocol: '6'
  #     RuleAction: allow
  #     Egress: 'true'
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: '0'
  #       To: '65535'
  # PrivateSubnetNetworkAclAssociation:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet
  #     NetworkAclId: !Ref PrivateNetworkAcl
  
  RDPSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to the Web host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: !Ref RDPLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: !FindInMap 
            - SubnetConfig
            - Private
            - CIDR
  BeanstalkSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow the Elastic Beanstalk instances to access the NAT device
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '1433'
          ToPort: '1433'

  WebServerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - Region2Principal
                  - !Ref 'AWS::Region'
                  - EC2Principal
            Action:
              - 'sts:AssumeRole'
      Path: /
  WebServerRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebServerRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            NotAction: 'iam:*'
            Resource: '*'
      Roles:
        - !Ref WebServerRole
  WebServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WebServerRole

  SampleApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      Description: AWS Elastic Beanstalk Dot net core web application

  SampleApplicationVersion:
    Type: 'AWS::ElasticBeanstalk::ApplicationVersion'
    Properties:
      Description: Version 1.0
      ApplicationName: !Ref SampleApplication
      SourceBundle:
        S3Bucket: !Join 
          - '-'
          - - elasticbeanstalk-dotnet
            - !Ref 'AWS::Region'
        S3Key: dotnet-core-tutorial-bundle.zip

  SampleEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    Properties:
      ApplicationName: !Ref SampleApplication
      EnvironmentName: 'SampleDotNet'
      Description: AWS Elastic Beanstalk Environment running Dotnet Sample Application
      VersionLabel: !Ref SampleApplicationVersion
      TemplateName: !Ref SampleConfigurationTemplate
      Tier:
        Name: WebServer
        Type: Standard

  SampleConfigurationTemplate:
    Type: 'AWS::ElasticBeanstalk::ConfigurationTemplate'
    Properties:
      ApplicationName: !Ref SampleApplication
      Description: 64bit Windows Server 2019 Configuration Version 1.0
      SolutionStackName: 64bit Windows Server 2019 v2.5.9 running IIS 10.0
      OptionSettings:
        # - Namespace: 'aws:elasticbeanstalk:application:environment'
        #   OptionName: EF_CONNECTION_STRING
        #   Value: !Join
        #     - ''
        #     - - 'Server='
        #       - !GetAtt 
        #         - SampleDB
        #         - Endpoint.Address
        #       - ';Database='
        #       - !GetAtt 
        #         - SampleDB
        #         - Endpoint.Port
              #- /sampledb
              #Server=myServerAddress;Database=myDataBase;User Id=myUsername; Password=myPassword
        # - Namespace: 'aws:elasticbeanstalk:application:environment'
        #   OptionName: param1
        #   Value: !Ref DBUser

        # - Namespace: 'aws:elasticbeanstalk:application:environment'
        #   OptionName: param2
        #   Value: !Ref DBPassword

        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: EnvironmentType
          Value: 'SingleInstance'

        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: RootVolumeType
          Value: 'gp2'          

        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: RootVolumeSize
          Value: '30'

        # - Namespace: 'aws:autoscaling:launchconfiguration'
        #   OptionName: SecurityGroups
        #   Value: !Ref DBInstanceSecurityGroup

        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: SecurityGroups
          Value: !Ref RDPSecurityGroup

        # - Namespace: 'aws:autoscaling:launchconfiguration'
        #   OptionName: SecurityGroups
        #   Value: !Ref BeanstalkSecurityGroup

        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: EC2KeyName
          Value: !Ref KeyName

        - Namespace: 'aws:ec2:instances'
          OptionName: InstanceTypes
          Value: !Ref EC2InstanceType

        # - Namespace: 'aws:autoscaling:launchconfiguration'
        #   OptionName: ImageId
        #   Value: 'ami-0eb7fbcc77e5e6ec6'

        - Namespace: 'aws:ec2:vpc'
          OptionName: VPCId
          Value: !Ref VPC

        - Namespace: 'aws:ec2:vpc'
          OptionName: Subnets
          Value: !Ref PublicSubnet
        - Namespace: 'aws:autoscaling:launchconfiguration'

          OptionName: IamInstanceProfile
          Value: !Ref WebServerInstanceProfile

  # Database Configurations
  # DBInstanceSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: RDS allows ingress from EC2 instances in this group.
  #     SecurityGroupIngress: []

  # DBEC2SecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Condition: Is-EC2-VPC
  #   Properties:
  #     GroupDescription: Open database for access
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '1433'
  #         ToPort: '1433'
  #         SourceSecurityGroupName: !Ref DBInstanceSecurityGroup

  # DBSecurityGroup:
  #   Type: 'AWS::RDS::DBSecurityGroup'
  #   Condition: Is-EC2-Classic
  #   Properties:
  #     DBSecurityGroupIngress:
  #       EC2SecurityGroupName: !Ref DBInstanceSecurityGroup
  #     GroupDescription: database access

  # SampleDB:
  #   Type: 'AWS::RDS::DBInstance'
  #   Properties:
  #     Engine: sqlserver-ex
  #     DBName: sampledb
  #     MasterUsername: !Ref DBUser
  #     DBInstanceClass: db.t2.micro
  #     AllocatedStorage: '20'
  #     MasterUserPassword: !Ref DBPassword
  #     VPCSecurityGroups: !If 
  #       - Is-EC2-VPC
  #       - - !GetAtt 
  #           - DBEC2SecurityGroup
  #           - GroupId
  #       - !Ref 'AWS::NoValue'
  #     DBSecurityGroups: !If 
  #       - Is-EC2-Classic
  #       - - !Ref DBSecurityGroup
  #       - !Ref 'AWS::NoValue'
Outputs:
  URL:
    Description: The URL of the Elastic Beanstalk environment
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - SampleEnvironment
          - EndpointURL
